
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 10 20:48:16 BRST 2012
//----------------------------------------------------

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 10 20:48:16 BRST 2012
  */
public class LogicalCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LogicalCup() {super();}

  /** Constructor which sets the default scanner. */
  public LogicalCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LogicalCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\004\005\000\002\004\003\000" +
    "\002\006\003\000\002\006\004\000\002\006\003\000\002" +
    "\006\003\000\002\006\005\000\002\005\003\000\002\005" +
    "\005\000\002\010\003\000\002\010\006\000\002\013\006" +
    "\000\002\013\005\000\002\014\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\005\000\002\012\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\015\006\000\002\015\006" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\022\003\022\006\007\012\010\013\023\014" +
    "\005\015\025\020\014\021\013\001\002\000\024\002\ufff5" +
    "\004\ufff5\005\ufff5\007\ufff5\010\ufff5\011\ufff5\020\ufff5\022" +
    "\ufff5\023\ufff5\001\002\000\004\024\073\001\002\000\024" +
    "\002\ufff3\004\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\020" +
    "\ufff3\022\ufff3\023\ufff3\001\002\000\016\006\007\012\010" +
    "\013\023\014\005\015\025\021\013\001\002\000\030\002" +
    "\uffed\004\uffed\005\uffed\007\uffed\010\uffed\011\uffed\016\uffed" +
    "\020\uffed\021\066\022\uffed\023\uffed\001\002\000\026\002" +
    "\uffec\004\uffec\005\uffec\007\uffec\010\uffec\011\uffec\016\uffec" +
    "\020\uffec\022\uffec\023\uffec\001\002\000\024\002\ufff8\004" +
    "\ufff8\005\ufff8\007\ufff8\010\ufff8\011\ufff8\020\ufff8\022\ufff8" +
    "\023\ufff8\001\002\000\016\006\007\012\010\013\023\014" +
    "\005\015\025\021\013\001\002\000\016\006\007\012\010" +
    "\013\023\014\005\015\025\021\013\001\002\000\024\002" +
    "\ufff6\004\ufff6\005\ufff6\007\ufff6\010\ufff6\011\ufff6\020\ufff6" +
    "\022\ufff6\023\ufff6\001\002\000\004\002\001\001\002\000" +
    "\004\002\062\001\002\000\022\002\ufffb\004\044\005\047" +
    "\007\043\010\046\011\045\020\ufff9\023\ufff9\001\002\000" +
    "\006\020\056\023\055\001\002\000\004\002\uffff\001\002" +
    "\000\004\024\037\001\002\000\026\002\uffeb\004\uffeb\005" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\016\uffeb\020\uffeb\022\uffeb" +
    "\023\uffeb\001\002\000\026\002\ufff1\004\ufff1\005\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\020\ufff1\021\031\022\ufff1\023\ufff1" +
    "\001\002\000\004\016\027\001\002\000\004\012\010\001" +
    "\002\000\024\002\ufff2\004\ufff2\005\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\020\ufff2\022\ufff2\023\ufff2\001\002\000\004\012" +
    "\010\001\002\000\006\022\uffe9\023\uffe9\001\002\000\006" +
    "\022\035\023\034\001\002\000\004\012\010\001\002\000" +
    "\024\002\ufff0\004\ufff0\005\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\020\ufff0\022\ufff0\023\ufff0\001\002\000\006\022\uffea\023" +
    "\uffea\001\002\000\004\012\041\001\002\000\016\006\007" +
    "\012\010\013\023\014\005\015\025\021\013\001\002\000" +
    "\016\006\uffed\012\uffed\013\uffed\014\uffed\015\uffed\021\uffed" +
    "\001\002\000\024\002\uffe3\004\044\005\047\007\043\010" +
    "\046\011\045\020\uffe3\022\uffe3\023\uffe3\001\002\000\016" +
    "\006\007\012\010\013\023\014\005\015\025\021\013\001" +
    "\002\000\016\006\007\012\010\013\023\014\005\015\025" +
    "\021\013\001\002\000\016\006\007\012\010\013\023\014" +
    "\005\015\025\021\013\001\002\000\016\006\007\012\010" +
    "\013\023\014\005\015\025\021\013\001\002\000\016\006" +
    "\007\012\010\013\023\014\005\015\025\021\013\001\002" +
    "\000\024\002\uffe7\004\044\005\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\020\uffe7\022\uffe7\023\uffe7\001\002\000\024\002\uffe4" +
    "\004\044\005\047\007\uffe4\010\uffe4\011\uffe4\020\uffe4\022" +
    "\uffe4\023\uffe4\001\002\000\024\002\uffe6\004\044\005\047" +
    "\007\043\010\046\011\uffe6\020\uffe6\022\uffe6\023\uffe6\001" +
    "\002\000\024\002\uffe8\004\uffe8\005\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\020\uffe8\022\uffe8\023\uffe8\001\002\000\024\002" +
    "\uffe5\004\044\005\047\007\uffe5\010\uffe5\011\uffe5\020\uffe5" +
    "\022\uffe5\023\uffe5\001\002\000\016\006\007\012\010\013" +
    "\023\014\005\015\025\021\013\001\002\000\020\002\ufffc" +
    "\006\007\012\010\013\023\014\005\015\025\021\013\001" +
    "\002\000\006\002\ufffe\023\055\001\002\000\020\002\ufff9" +
    "\004\044\005\047\007\043\010\046\011\045\023\ufff9\001" +
    "\002\000\022\002\ufffa\004\044\005\047\007\043\010\046" +
    "\011\045\020\ufffa\023\ufffa\001\002\000\004\002\000\001" +
    "\002\000\006\002\ufffd\023\055\001\002\000\016\004\044" +
    "\005\047\007\043\010\046\011\045\022\065\001\002\000" +
    "\024\002\ufff4\004\ufff4\005\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\020\ufff4\022\ufff4\023\ufff4\001\002\000\006\012\010\022" +
    "\067\001\002\000\026\002\uffee\004\uffee\005\uffee\007\uffee" +
    "\010\uffee\011\uffee\016\uffee\020\uffee\022\uffee\023\uffee\001" +
    "\002\000\006\022\071\023\034\001\002\000\026\002\uffef" +
    "\004\uffef\005\uffef\007\uffef\010\uffef\011\uffef\016\uffef\020" +
    "\uffef\022\uffef\023\uffef\001\002\000\024\002\ufff7\004\ufff7" +
    "\005\ufff7\007\ufff7\010\ufff7\011\ufff7\020\ufff7\022\ufff7\023" +
    "\ufff7\001\002\000\004\012\041\001\002\000\016\006\007" +
    "\012\010\013\023\014\005\015\025\021\013\001\002\000" +
    "\024\002\uffe2\004\044\005\047\007\043\010\046\011\045" +
    "\020\uffe2\022\uffe2\023\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\030\002\016\003\015\004\020\005\011\006" +
    "\017\007\014\010\005\011\025\013\010\014\023\015\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\011\006\071\007\014\010\005\011\025" +
    "\013\010\014\023\015\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\011\006\063" +
    "\007\014\010\005\011\025\013\010\014\023\015\003\001" +
    "\001\000\024\004\062\005\011\006\057\007\014\010\005" +
    "\011\025\013\010\014\023\015\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\027\013\010\014\023\001\001\000\002\001\001\000" +
    "\012\011\031\012\032\013\010\014\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\035\013\010\014" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\037\001\001\000\022\005\011\006\041\007\014\010" +
    "\005\011\025\013\010\014\023\015\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\011\006\053\007" +
    "\014\010\005\011\025\013\010\014\023\015\003\001\001" +
    "\000\022\005\011\006\052\007\014\010\005\011\025\013" +
    "\010\014\023\015\003\001\001\000\022\005\011\006\051" +
    "\007\014\010\005\011\025\013\010\014\023\015\003\001" +
    "\001\000\022\005\011\006\050\007\014\010\005\011\025" +
    "\013\010\014\023\015\003\001\001\000\022\005\011\006" +
    "\047\007\014\010\005\011\025\013\010\014\023\015\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\011" +
    "\006\060\007\014\010\005\011\025\013\010\014\023\015" +
    "\003\001\001\000\024\004\056\005\011\006\057\007\014" +
    "\010\005\011\025\013\010\014\023\015\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\031\012\067\013\010\014\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\073\001\001\000\022\005\011" +
    "\006\074\007\014\010\005\011\025\013\010\014\023\015" +
    "\003\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LogicalCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LogicalCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LogicalCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    // flag de debug mode
    boolean debug = true;
    // define o debug mode
    public void setDebug(boolean has) { debug = has; };
    public boolean getDebug() { return debug; };
    // variável de contagem de erros SINTÁTICOS
    Integer syntaxErrors = 0;
    // verifica se existe erro
    public boolean hasError() { return syntaxErrors > 0; };
    // retorna o número de erros SINTÁTICOS encontrados até o momento
    public Integer getNumErrors() { return syntaxErrors; };

    protected LogicalSystem logicalSystem;
    public void setLogicalSystem(LogicalSystem c) { logicalSystem = c; }; 

    // mostra resultado final da análise léxica
    public void showSummary() {
        if (hasError()) {
            System.err.println("----------------------------------------------------");
            if (getNumErrors() == 1) {
                System.err.println("!!! A expressão POSSUI 1 ERRO sintático !!!");
            } else {
                System.err.println("!!! A expressão POSSUI " + getNumErrors() + " ERROS SINTÁTICOS !!!");
            }
            System.err.println("----------------------------------------------------");
        } else if (debug) {
            System.out.println("----------------------------------------------------");
            System.out.println(" A expressão passou sem erro sintático !!!");
            System.out.println("----------------------------------------------------");
        }
    }
    
    public void syntax_error (java_cup.runtime.Symbol cur_token)
    {
        String s = "";
        syntaxErrors++;
        if (cur_token.value instanceof String) {
            s = (String)cur_token.value;
        };
        report_error("!> Erro sintático @("+
                String.valueOf(cur_token.left+1) + "," +
                String.valueOf(cur_token.right+1) + ")" +
                " Token #" + String.valueOf(cur_token.sym) + 
                ": " + s,
                null);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LogicalCup$actions {


 

  private final LogicalCup parser;

  /** Constructor */
  CUP$LogicalCup$actions(LogicalCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LogicalCup$do_action(
    int                        CUP$LogicalCup$act_num,
    java_cup.runtime.lr_parser CUP$LogicalCup$parser,
    java.util.Stack            CUP$LogicalCup$stack,
    int                        CUP$LogicalCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LogicalCup$result;

      /* select the action based on the action number */
      switch (CUP$LogicalCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Quantifier ::= FORALL COLON Variable Formula 
            {
              Quantifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       parser.logicalSystem.setPredicateLogic("Uso de quantificador universal."); 
                       RESULT = new Forall(v, f); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Quantifier",11, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-3)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Quantifier ::= EXISTS COLON Variable Formula 
            {
              Quantifier RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       parser.logicalSystem.setPredicateLogic("Uso de quantificador existencial.");
                       RESULT = new Exists(v, f); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Quantifier",11, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-3)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Connective ::= Formula REV_IMPLIES Formula 
            {
              Connective RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = new Implies(right, left); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Connective",5, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Connective ::= Formula IMPLIES Formula 
            {
              Connective RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = new Implies(left, right); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Connective",5, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Connective ::= Formula EQUIVALENT Formula 
            {
              Connective RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = new Equivalent(left, right); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Connective",5, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Connective ::= Formula OR Formula 
            {
              Connective RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = new Or(left, right); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Connective",5, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Connective ::= Formula AND Formula 
            {
              Connective RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).right;
		Formula left = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Formula right = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = new And(left, right); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Connective",5, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TermList ::= Term 
            {
              TermList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = new TermList();
                       RESULT.add(t); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("TermList",8, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TermList ::= TermList COMMA Term 
            {
              TermList RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).right;
		TermList tl = (TermList)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		
                       tl.add(t);
                       RESULT = tl;
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("TermList",8, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Term ::= Variable 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Variable t = (Variable)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = t; 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Term",7, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Term ::= Function 
            {
              Term RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Function t = (Function)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = t; 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Term",7, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Variable ::= IDENTIFIER 
            {
              Variable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       parser.logicalSystem.setPredicateLogic("Variável " + id + "."); 
                       RESULT = (Variable)parser.logicalSystem.getSymbolTable().occurrence(Variable.class, (String)id);
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Variable",10, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Function ::= IDENTIFIER LPAREN RPAREN 
            {
              Function RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).value;
		 
                       parser.logicalSystem.setPredicateLogic("Função " + id + ".");
                       RESULT = (Function)parser.logicalSystem.getSymbolTable().occurrence(Function.class, (String)id); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Function",9, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Function ::= IDENTIFIER LPAREN TermList RPAREN 
            {
              Function RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-3)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).right;
		TermList tl = (TermList)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).value;
		 
                       parser.logicalSystem.setPredicateLogic("Função " + id + ".");
                       Function f = (Function)parser.logicalSystem.getSymbolTable().occurrence(Function.class, (String)id); 
                       RESULT = new FunctionCall(f, tl); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Function",9, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-3)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Predicate ::= PREDICATE LPAREN TermList RPAREN 
            {
              Predicate RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-3)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).right;
		TermList tl = (TermList)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).value;
		 
                       parser.logicalSystem.setPredicateLogic("Predicado " + id + " com argumentos.");
                       Predicate p = (Predicate)parser.logicalSystem.getSymbolTable().occurrence(Predicate.class, (String)id);
                       RESULT = new PredicateCall(p, tl); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Predicate",6, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-3)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Predicate ::= PREDICATE 
            {
              Predicate RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       parser.logicalSystem.setPropositionalLogic("Predicado " + id + " sem argumentos representando proposição."); 
                       RESULT = (Predicate)parser.logicalSystem.getSymbolTable().occurrence(Predicate.class, (String)id); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Predicate",6, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AtomicFormula ::= Term EQUALITY Term 
            {
              Formula RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).right;
		Term left = (Term)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Term right = (Term)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       parser.logicalSystem.setPredicateLogic("Uso de igualdade");
                       RESULT = new Equality(left, right); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("AtomicFormula",3, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AtomicFormula ::= Predicate 
            {
              Formula RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = p; 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("AtomicFormula",3, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Formula ::= LPAREN Formula RPAREN 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).value;
		 
                       RESULT = f; 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Formula",4, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Formula ::= Quantifier 
            {
              Formula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Quantifier q = (Quantifier)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = q; 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Formula",4, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Formula ::= Connective 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Connective f = (Connective)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = f;
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Formula",4, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Formula ::= NOT Formula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = new Not(f); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Formula",4, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Formula ::= AtomicFormula 
            {
              Formula RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = f; 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Formula",4, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FormulaList ::= Formula 
            {
              FormulaList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                       RESULT = new FormulaList();
                       RESULT.add(f); 
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("FormulaList",2, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FormulaList ::= FormulaList COMMA Formula 
            {
              FormulaList RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).right;
		FormulaList fl = (FormulaList)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		
                       fl.add(f);
                       RESULT = fl;
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("FormulaList",2, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LogicalSystem ::= Formula 
            {
              LogicalSystem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                     parser.logicalSystem.setFormulaSystem(f); 
                  
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("LogicalSystem",1, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LogicalSystem ::= FormulaList DERIVATION 
            {
              LogicalSystem RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).right;
		FormulaList fl = (FormulaList)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).value;
		 
                      parser.logicalSystem.setDerivationSystem(fl, null);
                  
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("LogicalSystem",1, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LogicalSystem ::= DERIVATION FormulaList 
            {
              LogicalSystem RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		FormulaList fl = (FormulaList)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                      parser.logicalSystem.setDerivationSystem(null, fl);
                  
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("LogicalSystem",1, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LogicalSystem ::= FormulaList DERIVATION FormulaList 
            {
              LogicalSystem RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).right;
		FormulaList left = (FormulaList)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		FormulaList right = (FormulaList)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		 
                      parser.logicalSystem.setDerivationSystem(left, right);
                  
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("LogicalSystem",1, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-2)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Start ::= error 
            {
              LogicalSystem RESULT =null;
		
                        System.err.println("Fim inesperado do sistema lógico.");
                    
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).right;
		LogicalSystem start_val = (LogicalSystem)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)).value;
		RESULT = start_val;
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.elementAt(CUP$LogicalCup$top-1)), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LogicalCup$parser.done_parsing();
          return CUP$LogicalCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Start ::= LogicalSystem 
            {
              LogicalSystem RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()).right;
		LogicalSystem ls = (LogicalSystem)((java_cup.runtime.Symbol) CUP$LogicalCup$stack.peek()).value;
		
                    RESULT = parser.logicalSystem;
                  
              CUP$LogicalCup$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LogicalCup$stack.peek()), RESULT);
            }
          return CUP$LogicalCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

